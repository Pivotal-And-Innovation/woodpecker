<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--数据源配置-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="${jdbc.minPoolSize}" />
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="600" />
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素.
        如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default:0 -->
        <property name="maxStatements" value="0" />
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，
        那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default:false -->
        <property name="breakAfterAcquireFailure" value="false" />
        <property name="testConnectionOnCheckout" value="false" />
    </bean>

    <!--sql会话工厂配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/woodpecker/mapper/*.xml" />
        <property name="configLocation" value="classpath:xml/datasource-config.xml" />

        <!-- 添加分页插件 -->
        <property name="plugins">
            <list>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <props>
                            <prop key="dialect">mysql</prop>
                            <prop key="offsetAsPageNum">true</prop>
                            <prop key="rowBoundsWithCount">true</prop>
                            <prop key="pageSizeZero">true</prop>
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!--事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- mybatis配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.woodpecker.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- Spring声明式事务 -->
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="cancel*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>

    <!--切面配置-service包中的符合上述事务配置的方法加上事务。也可直接用@Transactional注解-->
    <aop:config>
        <aop:pointcut id="pc" expression="execution(public * com.woodpecker..service..*.*(..)) " />
        <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice"/>
        <!--<aop:aspect id="dataSourceMut" ref="dataSourceAspect" order="1">-->
        <!--<aop:pointcut id="sourceRoute" expression="execution(public * com.creditcenter.book.service..*.*(..)))"/>-->
        <!--<aop:before method="before" pointcut-ref="sourceRoute"/>-->
        <!--<aop:after method="after" pointcut-ref="sourceRoute"/>-->
        <!--</aop:aspect>-->
    </aop:config>

    <!--特别说明：被注释掉的为多数据源时候多配置(再配置另一个数据源多的dataSource)-->
    <!--多数据源配置-->
    <!--<bean id="dataSourceRouter" class="com.woodpecker.common.mybatis.DataSourceRouter">-->
    <!--<property name="targetDataSources">-->
    <!--<map key-type="java.lang.String" value-type="javax.sql.DataSource">-->
    <!--<entry key="default" value-ref="dataSource" />-->
    <!--<entry key="book" value-ref="bookDataSource" />-->
    <!--</map>-->
    <!--</property>-->
    <!--<property name="defaultTargetDataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--<bean id="dataSourceAspect" class="com.woodpecker.common.mybatis.DataSourceAspect">-->
    <!--</bean>-->

</beans>